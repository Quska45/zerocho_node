- http 메서드도 사용할 수 있다.
- 메서드를 쓰는 경우 주소와 메서드 타입도 일치해야한다.
- app.use 처럼 여러개를 router하나에 연결 할 수 있다.
    - 로그인여부, 관리인 여부 등에 대한 미들웨어를 여러개 연결할 수 있다.
    - router.get( '/', middleware1, middleware2, middleware3 )과 같은 코딩이 가능하다
- res.render 메서드로 클라이언트에 응답을 보낸다.
    - 익스프레스가 응답 객체에 새로 추가한 메서드이다.
    - 템플릿 엔진을 사용하는 부분이다.
- express.Router() 객체를 사용하지 않고 app.js에서 app.get()으로 사용해도 되지만 소스의 분리를 위해 객체를 생성해서 사용한다.
- 라우터는 요청에 대한 응답을 보내거나 에러핸들러로 요청을 넘겨야한다. 안그러면 브라우저는 계속 응답을 기다리는 상태가된다.
- next()가 라우터에서 특별한 기능을 수행한다. 
    - nextr( 'route' )는 라우터에 연결된 나머지 미들웨어들을 건너뛸 때 사용한다.
- 동일한 경로의 라우터를 등록하는 것도 이론상 가능하다.
    - 책에선 된다고 했는데 실제로 해봤더니 안되긴 한다.
    - 안되는 것이 아니라 응답을 두번 보내기 때문. 이론상 무조건 가능하다.
- 라우터 주소에는 특수한 패턴을 사용할 수 있다.
    - router.get('/users/:id', function( req, res ){
        console.log(req.params, req.query);
    });
    - :id 자리에 주소에 다른 값을 넣을 수 있다.
    - /users/1, /users/123과 같이 사용하면 라우터에 걸리게 된다.
    - req.params객체 안에 값이 들어간다. req.params.id에 값이 있게 된다.
    - 주소에 쿼리스트링을 쓰면 req.query 객체 안에 값이 들어간다.
    - 이 패턴을 사용할 떄 주의해야 할것은 다른 라우터보다 뒤쪽에 위치해야한다.
    - 다양한 라우터를 아우르는 와일드카드 역할을 하기 때문에 일반 라우터보다 뒤에 위치해야 다른 라우터를 방행하지 않는다.
- 사용된 render 말고도 몇 가지 응답 메서드가 있다.
    - send
        - 쓰임이 많다.
        - 버퍼 데이터 문자열 전송
        - HTML코드 전송
        - JSON 데이터 전송
    - sendFile
        - 파일을 응답으로 보내주는 메서드
    - json
        - json을 전송
    - redirect
        - 응답을 다른 라우터로 보냄
    - render가 주로 사용된다.
        - 템플릿 엔진을 렌더링할 떄 사용한다.
- 응답은 기본적으로 200이지만 원하는 경우 바꿀 수 있따.
    - res.status(404).send('Not Found');
- 응답을 여러번 보내는 경우 에러가 발생한다.
    - can't set heasers after they are sent.
    - res로 응답을 두번 보내는 경우를 의미한다.
- 라우터가 요청을 처리하지 못하는 경우
    - 요청을 처리할 수 있는 라우터가 없으면 다음 미들웨어로 넘어간다.
    - app.js확인 하기